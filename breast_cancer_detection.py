# -*- coding: utf-8 -*-
"""Breast Cancer Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H7kjbZlfwmYWx8vc-D1xVFOVYNWI6qhC

Importing the Dependencies
"""

import numpy as np
import pandas as pd
import sklearn.datasets
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection & Processing"""

#loading data from sklearn
breast_cancer_dataset = sklearn.datasets.load_breast_cancer()

print(breast_cancer_dataset)

#loading data  to pandas datafram
data_frame =pd.DataFrame(breast_cancer_dataset.data, columns= breast_cancer_dataset.feature_names)

#print 5 rows of data frame
data_frame.head()

#adding the target column to the data frame
data_frame['label'] = breast_cancer_dataset.target

#print last 5 rows of data set
data_frame.tail()

#no. of  rows and column in the dataset
data_frame.shape

#getting some information about the dataset
data_frame.info()

# checking for missing values
data_frame.isnull().sum()

#Statical measures of dataset
data_frame.describe()

#checking the distribution of target variable
data_frame['label'].value_counts()

"""1---> Benign
0---> Malignant
"""

data_frame.groupby('label').mean()

"""Separating the features and Target"""

X= data_frame.drop(columns='label',axis=1) #droping column mention axis value is 1 and for row axis = 0
Y= data_frame['label']

print(X)

print(Y)

"""Splitting the data into traing data & Testing data

"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Model Training

Logistic Regression

"""

model = LogisticRegression()

#training the logistic regression model using training data
model.fit(X_train, Y_train)

"""Model Evaluation

Accuracy Score
"""

#accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(Y_train, X_train_prediction)

print('Accuracy of training data = ', training_data_accuracy)

#accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(Y_test, X_test_prediction)

print('Accuracy of test data = ', test_data_accuracy)

"""Building Predective System"""

input_data =(13.54,14.36,87.46,566.3,0.09779,0.08129,0.06664,0.04781,0.1885,0.05766,0.2699,0.7886,2.058,23.56,0.008462,0.0146,0.02387,0.01315,0.0198,0.0023,15.11,19.26,99.7,711.2,0.144,0.1773,0.239,0.1288,0.2977,0.072598510653)
#changing the input data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the numpy array as we are predicting for one datapoint
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if(prediction[0]== 0):
  print('The Breast cancer is Malignant')
else :
    print('The Breast cancer is Benign')